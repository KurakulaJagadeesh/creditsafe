input {
    jdbc {
        jdbc_driver_library => "/usr/share/logstash/files/ojdbc7.jar"
        jdbc_driver_class => "Java::oracle.jdbc.driver.OracleDriver"
        jdbc_connection_string => "jdbc:oracle:thin:@192.168.252.29:1521/msuk1.prodnet.dom"
        jdbc_user => "csuk_search"
        jdbc_password => "nsdl5jdh94GsK3JJJDUmvn"
        jdbc_fetch_size => 1000
        statement_filepath => "/usr/share/logstash/files/group-csuk-company-search.sql"
        lowercase_column_names => false
    }
}

filter {
    ruby {
		init => "require 'csv'"
		code => "
			['phoneNumbers', 'activityCodes', 'previousNames', 'tradingNames', 'urls', 'taxIds'].each { |type|
			if event.include?(type) then
			if event.get(type) == nil || event.get(type) == 'null' then
			event.remove(type)
			else
			# bin data if not valid CSV
			begin
			event.set(type, CSV.parse(event.get(type))[0])
			rescue
			event.remove(type)
			end
			end
			end
		}"
	}
    mutate {
        rename => {
            "address.line1" => "[address][line1]"
        }
        rename => {
            "address.line2" => "[address][line2]"
        }
        rename => {
            "address.line3" => "[address][line3]"
        }
        rename => {
            "address.line4" => "[address][line4]"
        }
        rename => {
            "address.postalCode" => "[address][postalCode]"
        }
        rename => {
            "address.city" => "[address][city]"
        }
        rename => {
            "address.registeredCity" => "[address][registeredCity]"
        }
        rename => {
            "address.county" => "[address][county]"
        }
    }
    mutate {
        rename => {
            "noEmployees.from" => "[noEmployees][from]"
        }
        rename => {
            "noEmployees.to" => "[noEmployees][to]"
        }
    }
    mutate {
        rename => {
            "turnover.from" => "[turnover][from]"
        }
        rename => {
            "turnover.to" => "[turnover][to]"
        }
    }
    ruby {
		path => "/usr/share/logstash/files/scripts/add_simple_value.rb"
	}
	ruby {
		path => "/usr/share/logstash/files/scripts/clean_up.rb"
	}
	ruby {
		code => " 
			def filter(event) 
				limit = event.get('creditLimit') 
				case limit 
					when -1 then event.set('creditLimit_Modified', 0) 
					else event.set('creditLimit', limit)
				end 
				return [event] 
			end
			filter(event)
		"
	}
	ruby {
		code => " 
			def filter(event)
				to = event.get('[noEmployees][to]')
				from = event.get('[noEmployees][from]')
				case to 
					when -1 then event.set('[noEmployees][to]', 0)
					else event.set('[noEmployees][to]', to)
				end
				case from
					when -1 then event.set('[noEmployees][from]', 0)
					else event.set('[noEmployees][from]', from)
				end
				return [event] 
			end
			filter(event)			
		"
	}
}

output {
	opensearch {
		hosts => "https://vpc-usp-dev-crncwmaez7xfl4pzi4c3iz3fya.eu-west-1.es.amazonaws.com:443"
		index => "jag-logstash-jvm"
		document_id => "%{companyId}"
		ssl_certificate_verification => false
		ssl => true
		user => "usp-search"
		password => "SearchAdmin1!"
	}
}