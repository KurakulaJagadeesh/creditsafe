// This script is to inject some additional criteria into the search criteria object.
// The script is run before the build process to ensure that the criteria object is updated before the build process begins.
// The script is also responsible for validating that the only modification made was the addition of the "id.type" field.

import fs from 'fs';
import path from 'path';
import util from 'util';
import criteriaObject from '@usp-monorepo/usp-core/config/companyExternalCriterias.mjs';

const criteriaToInject = {
	type: {
		allowedValues: [
			'ltd',
			'nonltd',
			'nonltdnonreg',
		],
		required: false,
	},
	exact: {
		allowedValues: [
			true,
			false,
		],
		required: false,
	},
};

// Define a constant for the countries that require injection of the exact field.
const COUNTRIES_REQUIRING_EXACT_INJECT = ['AF', 'AU', 'BR', 'CH', 'ES', 'FI', 'ID', 'KH', 'KR', 'LI', 'LU', 'MM', 'MX', 'MY', 'TH', 'VN'];

/**
 * Transforms an individual criteria set by injecting missing fields.
 * - Injects the `type` field if `id` is present and `type` is missing.
 * - Flattens the `address` property into the top level and, for certain countries,
 *   injects the `exact` field if not already present.
 * @param {object} set - A criteria set.
 * @param {string} country - The country code.
 * @returns {object} The transformed criteria set.
 */
const transformCriteriaSet = (set, country) => {
	// If the set has an id but no type, inject the type field.
	if (set.id && !set.type) {
		return {
			...set,
			type: criteriaToInject.type,
		};
	}

	// If the set contains an address, flatten it.
	if (set.address) {
		const { address, ...rest } = set;
		// For specific countries (eg index file), if the 'exact' field is not present, inject it.
		if (COUNTRIES_REQUIRING_EXACT_INJECT.includes(country) && !Object.hasOwn(rest, 'exact')) {
			return {
				...rest,
				...address,
				exact: criteriaToInject.exact,
			};
		}
		return {
			...rest,
			...address,
		};
	}

	// Return the set unchanged if no modifications are needed.
	return set;
};

/**
 * Initializes the search criteria by transforming each country's criteria sets.
 * @param {object} criteriasObject - The original criteria object.
 * @returns {object} The updated criteria object.
 */
const initializeSearchCriterias = (criteriasObject) => {
	const updatedSearchCriteria = Object.keys(criteriasObject.searchCriteria).map((country) => {
		const criteriaForCountry = criteriasObject.searchCriteria[country];
		const updatedCriteriaSets = criteriaForCountry.criteriaSets.map((set) => transformCriteriaSet(set, country));
		return {
			[country]: {
				...criteriaForCountry,
				criteriaSets: updatedCriteriaSets,
			},
		};
	});

	return {
		...criteriasObject,
		searchCriteria: Object.assign({}, ...updatedSearchCriteria),
	};
};

/**
 * Modifies the criteria file by injecting missing fields and writing the updated object to disk.
 */
const modifyCriterias = () => {
	console.log('Modifying criterias.json to include missing type & exact field.');
	const updatedCriteriaObject = initializeSearchCriterias(criteriaObject);

	const objectAsString = util.inspect(updatedCriteriaObject, {
		compact: false,
		depth: null,
		maxArrayLength: null,
		maxStringLength: null,
	});

	// Create a new Date object representing the current date and time
	const now = new Date();

	// Convert the date to an ISO 8601 formatted string
	const isoString = now.toISOString();

	// Create the export statement
	const fileContent = `// This file was auto-generated by pre-build.mjs on ${isoString}\n// Do not edit manually.\n\nexport default ${objectAsString};`;

	// Write to the .mjs file so it can be imported as an ESM module
	fs.writeFileSync(path.resolve('../../core/config/companyInternalCriterias.mjs'), fileContent);
	console.log('Successfully modified criterias.');
};

export default modifyCriterias;
